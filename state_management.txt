Planet City Builder
State Management

Flutter offers many different options for managing app states, including Provider (basic management) to Fish-Redux (advanced). The essence of Flutter state management draws many similarities to Android state management. onStart, onResume, onPause, and onDestroy exist as similar methods in Flutter, but there exist reactive implementations of state management as well (BLOC for Flutter), where data flows from network to UI layers and is handled asynchronously. In this case, while the app lifecycle may be defined differently, handling app opening and closing cases are still necessary.

Handling the typical app use cases (sudden app closes, switching between app screens, putting app out of focus, etc.) is highly necessary for Planet City Builder. Losing game progress is an easy to lose a player forever. As such, a likely early implementation of state management will involve frequent autosaving to disk combined with an automatic save whenever the app is paused or destroyed. Since the ultimate goal of storing state information is for the player to lose as little progress as possible (while minimizing downtime; i.e. app freezing or performance), an ideal version of the app beyond the MVP will store the most critical game information in the cache instead of the disk. That way, the experience between switching app screens and to other apps would feel more seamless. 